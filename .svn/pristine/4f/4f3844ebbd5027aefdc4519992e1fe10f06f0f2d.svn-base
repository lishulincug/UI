using DevExpress.XtraEditors.Repository;
using NSC.GridPlan.PowerEquipment.UI.Class;
using NSC.GridPlan.PowerEquipment.UI.Tables;
using NSC.PMSHandler.DataContractObjects;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace NSC.GridPlan.PowerEquipment.UI
{
    public partial class StationAttribute : Form
    {
        SubStaObjects mSubSta = new SubStaObjects();
        public StationAttribute()
        {
            InitializeComponent();
        }
        #region 界面事件
        /// <summary>
        /// 升压变
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnBoost_Click(object sender, EventArgs e)
        {
            SetBoostView();
            BindBoostData();
        }
        /// <summary>
        /// 母线
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnBus_Click(object sender, EventArgs e)
        {
            SetBusView();
            BindBusData();
        }
        /// <summary>
        /// 机组
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnUnit_Click(object sender, EventArgs e)
        {
            SetUnitView();
            BindUnitData();
        }
        /// <summary>
        /// 电源信息预览
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnPreView_Click(object sender, EventArgs e)
        {
            //EquipmentInfoShow lineShow = EquipmentInfoShow.Instance();
            //Dictionary<string, string> FieldName = StationTable.GetFieldName("交流");
            //Dictionary<string, object> FieldValue = StationTable.GetValueInfo(mSubSta);
            //Dictionary<string, bool> FieldLink = StationTable.GetFieldLink();
            //Dictionary<string, bool> FieldItem = StationTable.GetFieldItem();
            //string[] groupName = new string[4];
            //groupName[3] = "基本信息";
            //groupName[2] = "升压变信息";
            //groupName[1] = "母线信息";
            //groupName[0] = "机组信息";      
            //lineShow.InitalGridControl(groupName, FieldName, FieldValue, FieldLink, txtName.Text, "电源属性");
            string path = Application.StartupPath + @"\DataStruct.xml";
            List<StructTable> mStructTableCollect = AnalysisDataStruct.AnalysisData(path, "SubStation");
            AttributeShow dataShow = AttributeShow.Instance();
           
            dataShow.InitalGridData(mStructTableCollect, txtName.Text, "电源属性");
        }
        /// <summary>
        /// 升压变添加行
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gvBoost_InitNewRow(object sender, DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs e)
        {
            gvBoost.SetRowCellValue(e.RowHandle, gvBoost.Columns[0], gvBoost.RowCount);
            gvBoost.UpdateCurrentRow();
        }
        /// <summary>
        /// 升压变数量变化
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gvBoost_RowCountChanged(object sender, EventArgs e)
        {

        }
        /// <summary>
        /// 母线添加行
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gvBus_InitNewRow(object sender, DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs e)
        {
            gvBus.SetRowCellValue(e.RowHandle, gvBus.Columns[0], gvBus.RowCount);
            gvBus.UpdateCurrentRow();
        }
        /// <summary>
        /// 母线数量变化
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gvBus_RowCountChanged(object sender, EventArgs e)
        {

        }
        /// <summary>
        /// 母线数量改变
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtBusNum_TextChanged(object sender, EventArgs e)
        {
            //注：初始化默认母线为3条
            int mNum = BaseFunction.GetCode(txtBusNum.Text);//获取母线数量          
            //电源母线表修改
            BaseFunction.GridViewChanged(gvBus, mNum);  
        }
        /// <summary>
        /// 限制输入数值
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtBusNum_KeyPress(object sender, KeyPressEventArgs e)
        {
            BaseFunction.KeyPress(sender, e); 
        }
        /// <summary>
        /// 限制输入数值
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtBoostNum_KeyPress(object sender, KeyPressEventArgs e)
        {
            BaseFunction.KeyPress(sender, e); 
        }
        /// <summary>
        /// 升压变改变
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtBoostNum_TextChanged(object sender, EventArgs e)
        {
            //注：初始化默认升压变为3台
            int mNum = BaseFunction.GetCode(txtBoostNum.Text);//获取升压变台数          
            //升压变表修改
            BaseFunction.GridViewChanged(gvBoost, mNum);  
        }
        
        /// <summary>
        /// 添加机组
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gvUnit_InitNewRow(object sender, DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs e)
        {
            gvUnit.SetRowCellValue(e.RowHandle, gvUnit.Columns[0], gvUnit.RowCount);
            gvUnit.UpdateCurrentRow();
        }
        /// <summary>
        /// 机组数量改变
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gvUnit_RowCountChanged(object sender, EventArgs e)
        {

        }
        /// <summary>
        /// 机组数量变化
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtUnitNum_TextChanged(object sender, EventArgs e)
        {
            //注：初始化默认机组为3台
            int mNum = BaseFunction.GetCode(txtUnitNum.Text);//获取机组台数        
            SubStaObjects mSubSta = new SubStaObjects();//变电站信息全局变量
            //机组表修改
            BaseFunction.GridViewChanged(gvUnit, mNum, mSubSta);  

        }
        /// <summary>
        /// 限定输入数值
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtUnitNum_KeyPress(object sender, KeyPressEventArgs e)
        {
            BaseFunction.KeyPress(sender, e); 
        }
        #endregion
        #region 私有方法
        /// <summary>
        /// 升压变视图
        /// </summary>
        private void SetBoostView()
        {
            if (this.Controls.Contains(this.panelBus))
                this.Controls.Remove(this.panelBus);
            if (this.Controls.Contains(this.panelUnit))
                this.Controls.Remove(this.panelUnit);
            this.Controls.Add(this.panelBoost);
            this.panelBoost.Dock = DockStyle.Bottom;
            this.panelBoost.BringToFront();
            this.panelBoost.Visible = true;
        }
        /// <summary>
        /// 母线视图
        /// </summary>
        private void SetBusView()
        {
            if (this.Controls.Contains(this.panelUnit))
                this.Controls.Remove(this.panelUnit);
            if (this.Controls.Contains(this.panelBoost))
                this.Controls.Remove(this.panelBoost);
            this.Controls.Add(panelBus);
            this.panelBus.Dock = DockStyle.Bottom;
            this.panelBus.BringToFront();
            this.panelBus.Visible = true;
        }
        /// <summary>
        /// 机组视图
        /// </summary>
        private void SetUnitView()
        {
            if (this.Controls.Contains(this.panelBoost))
                this.Controls.Remove(this.panelBoost);
            if (this.Controls.Contains(this.panelBus))
                this.Controls.Remove(this.panelBus);
            this.Controls.Add(panelUnit);
            this.panelUnit.Dock = DockStyle.Bottom;
            this.panelUnit.BringToFront();
            this.panelUnit.Visible = true;
        }
        /// <summary>
        /// 绑定升压变数据
        /// </summary>
        private void BindBoostData()
        {
            //获取表结构
            DataTable dtBoost = StationTable.GetStaTable("升压变");
            RepositoryItemComboBox repositoryWinding = new RepositoryItemComboBox();
            //绑定表结构
            this.gcBoost.DataSource = dtBoost;
            this.gcBoost.MainView = gvBoost;
            gvBoost.PopulateColumns();
            gvBoost.Columns["绕组数"].ColumnEdit = repositoryWinding;
            //绑定数据
            int mNum = BaseFunction.GetCode(this.txtBoostNum.Text);//获取台数; 
            for (int i = 0; i < mNum; i++)
            {
                gvBoost.AddNewRow();
            }
            //自适应
            gvBoost.BestFitColumns();
            this.gvBoost.Tag = "升压变";
        }
        /// <summary>
        /// 绑定母线数据
        /// </summary>
        private void BindBusData()
        {
            DataTable dtBus = StationTable.GetStaTable("母线");
            RepositoryItemComboBox repositoryWorkWay = new RepositoryItemComboBox();
            RepositoryItemComboBox repositoryCapacitive = new RepositoryItemComboBox();
            this.gcBus.DataSource = dtBus;
            gvBus.PopulateColumns();
            gvBus.Columns["运行方式"].ColumnEdit = repositoryWorkWay;
            gvBus.Columns["并联电容电抗"].ColumnEdit = repositoryCapacitive;
            //绑定数据
            int mBusNum = BaseFunction.GetCode(txtBusNum.Text);//获取主变号;     
            for (int i = 0; i < mBusNum; i++)
            {
                gvBus.AddNewRow();
            }
            gvBus.BestFitColumns();
            this.gvBus.Tag = "电源母线";
        }
        /// <summary>
        /// 绑定机组数据
        /// </summary>
        private void BindUnitData()
        {
            DataTable dtUnit = StationTable.GetStaTable("机组");
            RepositoryItemComboBox repositoryUnitType = new RepositoryItemComboBox();
            RepositoryItemComboBox repositoryRelationTrans = new RepositoryItemComboBox();
            RepositoryItemComboBox repositoryModelLc = new RepositoryItemComboBox();
            RepositoryItemComboBox repositoryModelWd = new RepositoryItemComboBox();
            RepositoryItemComboBox repositoryModelTs= new RepositoryItemComboBox();
            this.gcUnit.DataSource = dtUnit;
            gvUnit.PopulateColumns();
            gvUnit.Columns["机组类型"].ColumnEdit = repositoryUnitType;
            gvUnit.Columns["关联主变号"].ColumnEdit = repositoryRelationTrans;
            gvUnit.Columns["励磁模型"].ColumnEdit = repositoryModelLc;
            gvUnit.Columns["电力系统稳定器"].ColumnEdit = repositoryModelWd;
            gvUnit.Columns["调速器模型"].ColumnEdit = repositoryModelTs;
            //绑定数据
            int mUnitNum = BaseFunction.GetCode(txtUnitNum.Text);//获取主变号;     
            for (int i = 0; i < mUnitNum; i++)
            {
                gvUnit.AddNewRow();
            }
            gvUnit.BestFitColumns();
            this.gvUnit.Tag = "电源机组";
        }
        #endregion

        private void txtName_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void cbxType_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void cbxVol_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void cbxPartition_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void cbxRegion_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void txtSimple_EditValueChanged(object sender, EventArgs e)
        {

        }
    }
}
