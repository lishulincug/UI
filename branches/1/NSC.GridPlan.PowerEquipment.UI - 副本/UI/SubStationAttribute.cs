using DevExpress.XtraEditors.Repository;
using DevExpress.XtraGrid.Views.Grid;
using NSC.GridPlan.PowerEquipment.UI.Class;
using NSC.GridPlan.PowerEquipment.UI.Tables;
using NSC.PMSHandler.DataContractObjects;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using DevExpress.XtraVerticalGrid.Design;
using DevExpress.XtraVerticalGrid.Rows;
using DevExpress.Data;
using DevExpress.XtraVerticalGrid.Events;


namespace NSC.GridPlan.PowerEquipment.UI
{
    public partial class SubStationAttribute : Form
    {
        SubStaObjects mSubSta = new SubStaObjects();//变电站信息全局变量
        string path = Application.StartupPath + @"\DataStructModel.xml";//模型路径
        int UnboundExpression = 49;
        string SubPath = Application.StartupPath + @"\DataSubStructModel.xml";//子模型路径
        
        string DBFileName=Application.StartupPath+ "\\湖北省2012年地理接线图.mdb";
        const string
            NewRow = "New",
            TableGrid = "[GV_SUBSTATION]",
            TableLookUp = "GV_SUBSTATION_BUSBAR";       
        
        /// <summary>
        /// 分组控件
        /// </summary>
        /// 
        private DevExpress.XtraVerticalGrid.Rows.CategoryRow nCategoryRow;
        private DevExpress.XtraVerticalGrid.Rows.CategoryRow mCategoryRow;        
        /// <summary>
        /// 行控件
        /// </summary>
        private DevExpress.XtraVerticalGrid.Rows.EditorRow mEditorRow;
        /// <summary>
        /// 选择控件
        /// </summary>
        private DevExpress.XtraEditors.Repository.RepositoryItemComboBox mRepositoryItemComboBox;
        //private DevExpress.XtraEditors.Repository.repositoryItemLookUpEdit;
        /// <summary>
        /// Item控件
        /// </summary>
        private DevExpress.XtraEditors.Repository.RepositoryItemButtonEdit mRepositoryItemButtonEdit;
        public static EquipmentInfoShow theSingleton = null;
        
        public SubStationAttribute()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Create a new DataSet
            System.Data.DataSet xmlDataSet = new System.Data.DataSet("XML DataSet");
            // Load the XML document to the DataSet
            //xmlDataSet.ReadXml(@"H:\02GIS\洛斯达电力\UI devwc\trunk\NSC.GridPlan.PowerEquipment.UI\bin\Debug\DataStructModel.xml");
            // This line of code is generated by Data Source Configuration Wizard
            //gridControl1.DataSource = xmlDataSet.Tables["Group"];
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a ExcelDataSource
            //excelDataSource1.Fill();
            //gridControl1.ForceInitialize();
            //InitData();

            //TutorialInfo.WhatsThisCodeFile = "CS\\VertGridMainDemo\\Modules\\UnboundExpressions.cs";
            //TutorialInfo.WhatsThisXMLFile = "DevExpress.XtraVerticalGrid.Demos.CodeInfo.UnboundExpressions.xml";
            InitMDBData();
        }

        /// <summary>
        /// mdb转表格生成
        /// </summary>
        /// <param name="strGroupName"></param>
        /// <param name="FieldName"></param>
        /// <param name="FieldValue"></param>
        /// <param name="FieldLink"></param>
        /// <param name="iCount"></param>
        private void InitalGridControlByMdb(DevExpress.XtraVerticalGrid.VGridControl vGridControlx, DataSet Ds, string tableName)
        {
            //string[] strGroup = FieldName[strGroupName].Split(',');

            if (DBFileName != string.Empty)
            {
                string TableMETADATA_FIELD = "[METADATA_FIELD]";
                DataSet dsInt = new DataSet();
                System.Data.OleDb.OleDbDataAdapter oleDbDataAdapter = new System.Data.OleDb.OleDbDataAdapter("SELECT   * FROM " + TableMETADATA_FIELD, "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DBFileName);
                DataBaseOp.SetWaitDialogCaption("Loading Order Details...");
                oleDbDataAdapter.Fill(dsInt, TableMETADATA_FIELD);
            }
            IList<string> strGroupName1 = new List<string>();
            strGroupName1.Add("必填");
            strGroupName1.Add("选填");
            if (Ds.Tables[tableName] != null)
            {
                vGridControlx.Rows.Clear();
                nCategoryRow = new DevExpress.XtraVerticalGrid.Rows.CategoryRow();
                nCategoryRow.Properties.Caption = strGroupName1[0];
                vGridControlx.Rows.AddRange(new DevExpress.XtraVerticalGrid.Rows.BaseRow[] {
                nCategoryRow});
                nCategoryRow.Grid.Dock = DockStyle.Fill;

                mCategoryRow = new DevExpress.XtraVerticalGrid.Rows.CategoryRow();
                mCategoryRow.Properties.Caption = strGroupName1[1];
                vGridControlx.Rows.AddRange(new DevExpress.XtraVerticalGrid.Rows.BaseRow[] {
                mCategoryRow});
                mCategoryRow.Grid.Dock = DockStyle.Fill;             
                //}
                //判断是否存在重复组
                //if (!FieldName.ContainsKey(strGroupName1[k]))
                //    return;
                //string[] strName = FieldName[strGroupName1[k]].Split(',');
                //if (strName == null || strName.Length == 0)
                //    return;
                //循环填充表格
                for (int i = 0; i < Ds.Tables[tableName].Columns.Count; i++)
                {
                    string TableMETADATA_FIELD = "[METADATA_FIELD]";
                    DataSet ds = new DataSet();
                    System.Data.OleDb.OleDbDataAdapter oleDbDataAdapter = new System.Data.OleDb.OleDbDataAdapter("SELECT   ALIAS  FROM " + TableMETADATA_FIELD + "WHERE FIELDNAME =" + "'" + Ds.Tables[tableName].Columns[i].ColumnName + "'" + " AND " + "TABLENAME =" + "'" + tableName.Replace("[", "").Replace("]", "") + "'", "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DBFileName);
                    DataBaseOp.SetWaitDialogCaption("Loading Order Details...");
                    oleDbDataAdapter.Fill(ds, TableMETADATA_FIELD);

                    //设置row属性
                    this.mEditorRow = new DevExpress.XtraVerticalGrid.Rows.EditorRow();
                    this.mEditorRow.Name = Ds.Tables[tableName].Columns[i].ColumnName;
                    this.mEditorRow.Properties.FieldName = Ds.Tables[tableName].Columns[i].ColumnName;
                    this.mEditorRow.Properties.UnboundType = DevExpress.Data.UnboundColumnType.Object; //Ds.Tables[tableName].Columns[i].DataType; //
                    this.mEditorRow.Height = 20;
                    this.mEditorRow.Appearance.Options.UseForeColor = true;
                    if (Ds.Tables[tableName].Rows.Count > 0)
                    {
                        if (!(Ds.Tables[tableName].Rows[0][Ds.Tables[tableName].Columns[i].ColumnName] is System.DBNull) & ds.Tables[TableMETADATA_FIELD].Rows[0] != null)
                        {
                            this.mEditorRow.Properties.Caption = ds.Tables[TableMETADATA_FIELD].Rows[0]["ALIAS"].ToString();
                            
                            //this.mEditorRow.Properties.Value = FieldValue.ContainsKey(strName[i]) ? FieldValue[strName[i]] : string.Empty;
                            //判断是否存在下拉选择项、事件注册
                            //if (FieldLink.ContainsKey(strName[i]) && (FieldLink[strName[i]] == ComEditType.下拉选择))
                            //{
                            //    mRepositoryItemComboBox = new DevExpress.XtraEditors.Repository.RepositoryItemComboBox();
                            //    mRepositoryItemComboBox.Name = strName[i];
                            //初始化控件
                            //    FillAttributeComBox.FillComBox(mRepositoryItemComboBox);
                            //mRepositoryItemComboBox.Click += new EventHandler(mRepositoryItemComboBox_Click);
                            //    this.mEditorRow.Properties.RowEdit = mRepositoryItemComboBox;
                            //}
                            //判断是否存在数据集合项、事件注册
                            //if (FieldLink.ContainsKey(strName[i]) && (FieldLink[strName[i]] == ComEditType.数据集合))
                            //{
                            //    mRepositoryItemButtonEdit = new DevExpress.XtraEditors.Repository.RepositoryItemButtonEdit();
                            //    mRepositoryItemButtonEdit.Name = strName[i];
                            //mRepositoryItemButtonEdit.ButtonClick += new ButtonPressedEventHandler(mRepositoryItemButtonEdit_ButtonClick);
                            //    this.mEditorRow.Properties.RowEdit = mRepositoryItemButtonEdit;
                            //}
                             
                            this.nCategoryRow.ChildRows.AddRange(new DevExpress.XtraVerticalGrid.Rows.BaseRow[] { this.mEditorRow });
                        }
                        else if (Ds.Tables[tableName].Rows[0][Ds.Tables[tableName].Columns[i].ColumnName] is System.DBNull & ds.Tables[TableMETADATA_FIELD].Rows[0] != null)
                        {
                            this.mEditorRow.Properties.Caption = ds.Tables[TableMETADATA_FIELD].Rows[0]["ALIAS"].ToString();
                            this.mCategoryRow.ChildRows.AddRange(new DevExpress.XtraVerticalGrid.Rows.BaseRow[] { this.mEditorRow });
                        }
                        else
                        {
                            this.mEditorRow.Properties.Caption = Ds.Tables[tableName].Columns[i].ColumnName;
                            this.mCategoryRow.ChildRows.AddRange(new DevExpress.XtraVerticalGrid.Rows.BaseRow[] { this.mEditorRow });
                        }
                    }
                    else
                    {
                        this.mEditorRow.Properties.Caption = ds.Tables[TableMETADATA_FIELD].Rows[0]["ALIAS"].ToString();
                        this.mCategoryRow.ChildRows.AddRange(new DevExpress.XtraVerticalGrid.Rows.BaseRow[] { this.mEditorRow });
                    }
                }
            }
            // vGridControlx 行宽自动调整
            int recordWidth = (vGridControlx.Width - vGridControlx.RowHeaderWidth) / vGridControlx.Rows.Count;
            if (recordWidth > vGridControlx.RecordMinWidth)
            {
                vGridControlx.RecordWidth = recordWidth;
                vGridControlx.ScrollVisibility = DevExpress.XtraVerticalGrid.ScrollVisibility.Vertical;
            }
            else
            {
                vGridControlx.ScrollVisibility = DevExpress.XtraVerticalGrid.ScrollVisibility.Auto;
            }
        }
        
        protected  void InitMDBData()
        {
            DataSet ds = new DataSet();
            if (DBFileName != string.Empty)
            {
                System.Data.OleDb.OleDbDataAdapter oleDbDataAdapter = new System.Data.OleDb.OleDbDataAdapter("SELECT TOP 1 * FROM " + TableGrid, "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DBFileName);
                DataBaseOp.SetWaitDialogCaption("Loading Order Details...");
                oleDbDataAdapter.Fill(ds, TableGrid);
                oleDbDataAdapter = new System.Data.OleDb.OleDbDataAdapter("SELECT * FROM " + TableLookUp, "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DBFileName);
                DataBaseOp.SetWaitDialogCaption("Loading Products...");
                oleDbDataAdapter.Fill(ds, TableLookUp);
                //ds.Tables.AddRange();
                InitalGridControlByMdb(vGridControl2, ds, TableGrid);
                vGridControl2.DataSource = ds.Tables[TableGrid];
                //vGridControl4.Rows.Add
                //repositoryItemLookUpEdit1.DataSource = ds.Tables[TableLookUp];
                vGridControl2.BestFit();
            }
        }
        protected virtual void InitNWindData()
        {
            string DBFileName = string.Empty;
            DBFileName = DevExpress.Utils.FilesHelper.FindingFileName(Application.StartupPath, "\\湖北省2012年地理接线图.mdb");
            if (DBFileName != string.Empty)
            {
                //InitMDBData("Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DBFileName);
            }
        }
        
        /// <summary>
        /// 主变点击事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnTrans_Click(object sender, EventArgs e)
        {
            SetTransView();
            BindTransData();
        }
        /// <summary>
        /// 母线点击事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnBus_Click(object sender, EventArgs e)
        {
            SetBusView();
            BindBusData();
        }
        /// <summary>
        /// 主变状态
        /// </summary>
        private void SetTransView()
        {
            if (cbxType.Text.Contains("直流"))
            {
                if (this.Controls.Contains(this.panelBus))
                    this.Controls.Remove(this.panelBus);
                if (this.Controls.Contains(this.panelTrans))
                    this.Controls.Remove(this.panelTrans);
                if (!this.Controls.Contains(this.panelDCSub))
                    this.Controls.Add(panelDCSub);
                this.panelDCSub.Dock = DockStyle.Bottom;
                this.panelDCSub.BringToFront();
                this.panelDCSub.Visible = true;
                this.panelTrans.Visible = false;
            }
            else
            {
                if (this.Controls.Contains(this.panelBus))
                    this.Controls.Remove(this.panelBus);
                if (this.Controls.Contains(this.panelDCSub))
                    this.Controls.Remove(this.panelDCSub);
                if(!this.Controls.Contains(this.panelTrans))
                    this.Controls.Add(this.panelTrans);
                this.panelTrans.Dock = DockStyle.Bottom;
                this.panelTrans.BringToFront();
                this.panelTrans.Visible = true;
                this.panelBus.Visible = false;
            }
        }
        #region   转换表
    static DataTable ConvertToTable(DataTable source)
    {
        DataTable dt = new DataTable();
        //前两列是固定的加上
        dt.Columns.Add("主变号");
        dt.Columns.Add("Name");
        //以Item 字段为筛选条件  列转为行  下面有图
        var columns = (from x in source.Rows.Cast<DataRow>() select x[2].ToString()).Distinct();
        //把 Item 字段 做为新字段添加进去
        foreach (var item in columns) dt.Columns.Add(item).DefaultValue = 0;
        //   x[1] 是字段 Name 按  Name分组 g 是分组后的信息   g.Key 就是名字  如果不懂就去查一个linq group子句进行分组
        var data = from x in source.Rows.Cast<DataRow>()
                   group x by x[1] into g
                   select new { Key = g.Key.ToString(), Items = g };
        data.ToList().ForEach(x =>
        {
            //这里用的是一个string 数组 也可以用DataRow根据个人需要用
            string[] array = new string[dt.Columns.Count];
            //array[1]就是存名字的
            array[1] = x.Key;
            //从第二列开始遍历
            for (int i = 2; i < dt.Columns.Count; i++)
            {
                // array[0]  就是 ID
                if (array[0] == null)
                    array[0] = x.Items.ToList<DataRow>()[0]["主变号"].ToString();
                //array[0] = (from y in x.Items
                //            where y[2].ToString() == dt.Columns[i].ToString()
                //            select y[0].ToString()).SingleOrDefault();
                //array[i]就是 各种提成
                array[i] = (from y in x.Items
                            where y[2].ToString() == dt.Columns[i].ToString()//   y[2] 各种提成名字等于table中列的名字
                            select y[3].ToString()                            //  y[3] 就是我们要找的  ItemAmount 各种提成 的钱数
                           ).SingleOrDefault();
            }
            dt.Rows.Add(array);   //添加到table中
        });
        return dt;
         }
        #endregion
    /// <summary>
        /// 绑定主变数据
        /// </summary>
        private void BindTransData()
        {
            int mTransNum = BaseFunction.GetCode(txtTransCode.Text);//获取台数; 
            //获取表结构
            DataTable dtTrans = SubStationTable.GetSubStaTable("主变");                       
            //绑定表结构
            this.gcTrans.DataSource = dtTrans;
            this.gcTrans.MainView = gvTrans;
            gvTrans.PopulateColumns();                      
            //绑定数据
            
            mSubSta.SubGUSCollection.Clear();
            for (int i = 0; i < mTransNum; i++)
            {
                gvTrans.AddNewRow();
                //gvTrans.AddUnboundColumn();
                
                //赋值
                SubGSUObjects mSubGUS = new SubGSUObjects();
                mSubGUS.GSU.GSUCode =(i+1).ToString();
                mSubSta.SubGUSCollection.Add(mSubGUS);
            }
            //自适应
            
            gvTrans.BestFitColumns();
            //DataTable Newdt = ConvertToTable(dtTrans);
            //for (int i = 0; i < mTransNum; i++)
            //{
            //    dtNew.Columns.Add(mTransNum);
            //}
            //dtNew.Columns.Add("Name");
            //for (int i = 0; i < dtTrans.Rows.Count; i++)
            //{
            //    dtNew.Columns.Add("Column" + (i + 1).ToString(), typeof(string));
            //}
            //foreach (DataColumn dc in dtTrans.Columns)
            //{
            //    DataRow drNew = dtNew.NewRow();
            //    drNew["ColumnName"] = dc.ColumnName;
            //    for (int i = 0; i < dtTrans.Rows.Count; i++)
            //    {
            //        drNew[i + 1] = dtTrans.Rows[i][dc].ToString();
            //    }
            //    dtNew.Rows.Add(drNew);
            //}
            
            this.gvTrans.Tag = "变电站主变";          
        }
        /// <summary>
        /// 绑定母线、电容电抗数据
        /// </summary>
        private void BindBusData()
        {
            DataTable dtBus = SubStationTable.GetSubStaTable("母线");
            RepositoryItemComboBox repositoryWorkWay = new RepositoryItemComboBox();
            RepositoryItemComboBox repositoryCapacitive = new RepositoryItemComboBox();
            this.gcBus.DataSource = dtBus;
            gvBus.PopulateColumns();
            //gvBus.Columns["运行方式"].ColumnEdit = repositoryWorkWay;
            //gvBus.Columns["并联电容电抗"].ColumnEdit = repositoryCapacitive;
            //绑定数据
            int mBusNum = BaseFunction.GetCode(txtBusNum.Text);//获取主变号;     
            mSubSta.SubBusCollection.Clear();
            for (int i = 0; i < mBusNum; i++)
            {
                gvBus.AddNewRow();
                SubBusObjects mSubBus = new SubBusObjects();
                mSubBus.SubBus.BusCode = (i+1).ToString();
                mSubSta.SubBusCollection.Add(mSubBus);
                //mSubSta.SubBusCollection[0].SubBus.
            }
            gvBus.BestFitColumns();
            this.gvBus.Tag = "变电站母线";
        }
        /// <summary>
        /// 母线状态
        /// </summary>
        private void SetBusView()
        {
            if (this.Controls.Contains(this.panelDCSub))
                this.Controls.Remove(this.panelDCSub);
            if (this.Controls.Contains(this.panelTrans))
                this.Controls.Remove(this.panelTrans);
            this.Controls.Add(panelBus);
            this.panelBus.Dock = DockStyle.Bottom;
            this.panelBus.BringToFront();
            this.panelBus.Visible = true;
            this.panelTrans.Visible = false;
        }
        private void BindPRCData()
        {
            DataTable dtPRC = SubStationTable.GetSubStaTable("电容电抗");

            RepositoryItemComboBox repositoryWorkWay = new RepositoryItemComboBox();
            RepositoryItemComboBox repositoryCapacitive = new RepositoryItemComboBox();

            this.gcBus.DataSource = dtPRC;
            gvBus.PopulateColumns();
            //gvBus.Columns["运行方式"].ColumnEdit = repositoryWorkWay;
            //gvBus.Columns["并联电容电抗"].ColumnEdit = repositoryCapacitive;
            //绑定数据
            int mPRCNum = BaseFunction.GetCode(txtBusNum.Text);//获取主变号;     
            mSubSta.SubBusCollection.Clear();
            for (int i = 0; i < mPRCNum; i++)
            {
                gvBus.AddNewRow();
                SubBusObjects mSubBus = new SubBusObjects();
                mSubBus.SubBus.BusCode = (i + 1).ToString();
                mSubSta.SubBusCollection.Add(mSubBus);
                //mSubSta.SubBusCollection[0].SubBus.
            }
            gvBus.BestFitColumns();
            this.gvBus.Tag = "电容电抗";
        }
        private void SetPrcView()
        {
            if (this.Controls.Contains(this.panelDCSub))
                this.Controls.Remove(this.panelDCSub);
            if (this.Controls.Contains(this.panelTrans))
                this.Controls.Remove(this.panelTrans);
            this.Controls.Add(panelBus);
            this.panelBus.Dock = DockStyle.Bottom;
            this.panelBus.BringToFront();
            this.panelBus.Visible = true;
            this.panelTrans.Visible = false;
        }
        /// <summary>
        /// 初始化加载
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SubStationAttribute_Load(object sender, EventArgs e)
        {
            //变电站类型初始化
            //cbxType.Properties.Items.Add("交流变电站");
            //cbxType.Properties.Items.Add("直流换流站");
            cbxType.SelectedItem = cbxType.Properties.Items[0];
            cbxType.Text = cbxType.Properties.Items[0].ToString();
            //主变初始化
            //SetTransView();
           // BindTransData();
        }
        /// <summary>
        /// 变电站类型改变
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbxType_SelectedIndexChanged(object sender, EventArgs e)
        {
            //SetTransView();
            mSubSta.BaseSub.SubType = cbxType.Text;
        }
        /// <summary>
        /// 变电站属性汇总预览
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnPreview_Click(object sender, EventArgs e)
        {
            EquipmentInfoShow lineShow = EquipmentInfoShow.Instance();
            //Dictionary<string, string> FieldName = SubStationTable.GetFieldName("交流");
            //Dictionary<string, object> FieldValue = SubStationTable.GetValueInfo(mSubSta);
            //Dictionary<string, ComEditType> FieldLink = SubStationTable.GetFieldCom();
            //Dictionary<string, bool> FieldItem = SubStationTable.GetFieldItem();
            //string[] groupName = new string[4];
            //groupName[3] = "基本信息";
            //groupName[2] = "主变信息";
            //groupName[1] = "母线信息";
            //groupName[0] = "电容电抗";
            //lineShow.InitalGridControl(groupName, FieldName, FieldValue, FieldLink, txtName.Text, "变电站属性");
            lineShow.megreGridControl(vGridControl2);
        }      
        private void gvTrans_InitNewRow(object sender, DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs e)
        {
            gvTrans.SetRowCellValue(e.RowHandle, gvTrans.Columns[0], gvTrans.RowCount);
            gvTrans.UpdateCurrentRow();
            gcTrans.RefreshDataSource();
        }
        /// <summary>
        /// 母线数量变化
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtBusNum_TextChanged(object sender, EventArgs e)
        {
            //注：初始化默认母线为2条
            int mBusNum = BaseFunction.GetCode(txtBusNum.Text);//获取母线数量          
            //母线表修改
            BaseFunction.GridViewChanged(gvBus, mBusNum,mSubSta);
        }
        /// <summary>
        /// 添加或删除母线
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gvBus_InitNewRow(object sender, InitNewRowEventArgs e)
        {
            gvBus.SetRowCellValue(e.RowHandle, gvBus.Columns[0], gvBus.RowCount);
            gvBus.UpdateCurrentRow();
            gcBus.RefreshDataSource();   
        }
        /// <summary>
        /// 主变数量限定只能输入数值
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtTransCode_KeyPress(object sender, KeyPressEventArgs e)
        {
            BaseFunction.KeyPress(sender,e); 
        }
        /// <summary>
        /// 主变数量变化
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtTransCode_TextChanged(object sender, EventArgs e)
        {
            //注：初始化默认主变为3台
            int mTransNum = BaseFunction.GetCode(txtTransCode.Text);//获取主变台数          
            //主变表修改
            BaseFunction.GridViewChanged(gvTrans, mTransNum,mSubSta);  
          
        }
        /// <summary>
        /// 限定母线输入为数值
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtBusNum_KeyPress(object sender, KeyPressEventArgs e)
        {
            BaseFunction.KeyPress(sender, e); 
        }
        /// <summary>
        /// 变电站名称改变
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtName_TextChanged(object sender, EventArgs e)
        {
            mSubSta.BaseSub.SubName = txtName.Text;               
        }
        /// <summary>
        /// 主变数量变化
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gvTrans_RowCountChanged(object sender, EventArgs e)
        {
            //if (mSubSta.SubGUSCollection.Count > gvTrans.RowCount)//移除多余行
            //{
            //    for (int i = mSubSta.SubGUSCollection.Count; i >= gvTrans.RowCount; i--)
            //    {
            //        SubGSUObjects mSubGUS = new SubGSUObjects();
            //        mSubGUS.GSU.GSUCode = gvTrans.GetRowCellValue(i, gvTrans.Columns[0]).ToString();
            //        mSubSta.SubGUSCollection.Remove(mSubGUS);
            //    }
            //}
            //else//添加行
            //{
            //    for (int j = mSubSta.SubGUSCollection.Count; j < gvTrans.RowCount; j++)
            //    {
            //        SubGSUObjects mSubGUS = new SubGSUObjects();
            //        mSubGUS.GSU.GSUCode = gvTrans.GetRowCellValue(j, gvTrans.Columns[0]).ToString();
            //        mSubSta.SubGUSCollection.Add(mSubGUS);
            //    }
            //}
        }
        /// <summary>
        /// 母线数量变化
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gvBus_RowCountChanged(object sender, EventArgs e)
        {
            //if (mSubSta.SubBusCollection.Count > gvBus.RowCount)//移除多余行
            //{
            //    for (int i = mSubSta.SubBusCollection.Count; i >= gvBus.RowCount; i--)
            //    {
            //        SubBusObjects mSubBus = new SubBusObjects();
            //        mSubBus.SubBus.BusCode = gvBus.GetRowCellValue(i, gvBus.Columns[0]).ToString();
            //        mSubSta.SubBusCollection.Remove(mSubBus);
            //    }
            //}
            //else//添加行
            //{
            //    for (int j = mSubSta.SubBusCollection.Count; j < gvBus.RowCount; j++)
            //    {
            //        SubBusObjects mSubBus = new SubBusObjects();
            //        mSubBus.SubBus.BusCode = gvBus.GetRowCellValue(j, gvBus.Columns[0]).ToString();
            //        mSubSta.SubBusCollection.Add(mSubBus);
            //    }
            //}
        }

        private void cbxVol_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cbxVol.Text != "")
            {
                try
                { mSubSta.BaseSub.SubVol = Convert.ToInt16(cbxVol.Text); }
                catch
                { MessageBox.Show("电压等级请输入数值！"); }
            }
        }       

        private void txtSimple_SelectedIndexChanged(object sender, EventArgs e)
        {
            mSubSta.BaseSub.SimName = txtSimple.Text;
        }
       

        private void txtName_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void txtSimple_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void cbxPartition_SelectedIndexChanged(object sender, EventArgs e)
        {
            
            mSubSta.BaseSub.Partition = cbxPartition.Text;           
        }

        private void cbxRegion_SelectedIndexChanged(object sender, EventArgs e)
        {          
            mSubSta.BaseSub.PartitionEx = cbxRegion.Text;               
        }

        private void gridLookUpEdit1_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void listNavigate_FocusedNodeChanged(object sender, DevExpress.XtraTreeList.FocusedNodeChangedEventArgs e)
        {

        }

        private void vGridDdtial_Click(object sender, EventArgs e)
        {

        }

        private void tabPage1_Click(object sender, EventArgs e)
        {

        }

        private void toolDB_Click(object sender, EventArgs e)
        {
            DataTable dtData = this.vGridDdtial.DataSource as DataTable;
            DataBaseOp.DataOperator(dtData);
        }

        private void textEdit1_EditValueChanged(object sender, EventArgs e)
        {
            //注：初始化默认主变为3台
            int mTransNum = BaseFunction.GetCode(txtTransCode.Text);//获取主变台数          
            //主变表修改
            //BaseFunction.GridViewChanged(gvTrans, mTransNum, mSubSta); 
            //listNavigate.DataSource = dtGrid;
            List<StructTable> mStructTableCollect = AnalysisDataStruct.AnalysisData(path, "SubStationTrans");
            FillVGrid vGrid = new FillVGrid();
            vGrid.InitalGridData(mStructTableCollect, vGridDdtial);
        }

        private void textEdit2_EditValueChanged(object sender, EventArgs e)
        {
            //注：初始化默认母线为2条
            int mBusNum = BaseFunction.GetCode(txtBusNum.Text);//获取母线数量          
            //母线表修改
            //BaseFunction.GridViewChanged(gvBus, mBusNum, mSubSta);

        }

        //private void listNavigate_FocusedNodeChanged_1(object sender, DevExpress.XtraTreeList.FocusedNodeChangedEventArgs e)
        //{
        //    if (this.listNavigate.FocusedNode.GetDisplayText(0).ToString().Contains("母线") & this.listNavigate.FocusedNode.Level == 1)
        //    {
        //        List<StructTable> SubStructTableCollect = AnalysisDataStruct.AnalysisData(SubPath, "SubSubStationBus");
        //        FillVGrid vGrid = new FillVGrid();
        //        vGrid.InitalGridData(SubStructTableCollect, vGridDdtial);
        //    }
        //    else if (this.listNavigate.FocusedNode.GetDisplayText(0).ToString().Contains("主变") & this.listNavigate.FocusedNode.Level == 1)
        //    {
        //        List<StructTable> SubStructTableCollect = AnalysisDataStruct.AnalysisData(SubPath, "SubSubStationTrans");
        //        FillVGrid vGrid = new FillVGrid();
        //        vGrid.InitalGridData(SubStructTableCollect, vGridDdtial);
        //    }
        //    else if (this.listNavigate.FocusedNode.GetDisplayText(0).ToString().Contains("机组") & this.listNavigate.FocusedNode.Level == 1)
        //    {
        //        List<StructTable> SubStructTableCollect = AnalysisDataStruct.AnalysisData(SubPath, "SubSubStationJizu");
        //        FillVGrid vGrid = new FillVGrid();
        //        vGrid.InitalGridData(SubStructTableCollect, vGridDdtial);
        //    }
        //    else if (this.listNavigate.FocusedNode.GetDisplayText(0).ToString().Contains("机组") & this.listNavigate.FocusedNode.Level == 0)
        //    {
        //        List<StructTable> SubStructTableCollect = AnalysisDataStruct.AnalysisData(path, "SubSubStationJizu");
        //        FillVGrid vGrid = new FillVGrid();
        //        vGrid.InitalGridData(SubStructTableCollect, vGridDdtial);
        //    }
        //    else if (this.listNavigate.FocusedNode.GetDisplayText(0).ToString().Contains("主变") & this.listNavigate.FocusedNode.Level == 0)
        //    {
        //        List<StructTable> SubStructTableCollect = AnalysisDataStruct.AnalysisData(path, "SubStationTrans");
        //        FillVGrid vGrid = new FillVGrid();
        //        vGrid.InitalGridData(SubStructTableCollect, vGridDdtial);
        //    }
        //    else if (this.listNavigate.FocusedNode.GetDisplayText(0).ToString().Contains("母线") & this.listNavigate.FocusedNode.Level == 0)
        //    {
        //        List<StructTable> SubStructTableCollect = AnalysisDataStruct.AnalysisData(path, "SubStationBus");
        //        FillVGrid vGrid = new FillVGrid();
        //        vGrid.InitalGridData(SubStructTableCollect, vGridDdtial);
        //    }
        //}
        private void vGridDdtial_Click_1(object sender, EventArgs e)
        {

        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            SetPrcView();
            BindPRCData();
        }
        private void listView1_SelectedIndexChanged(object sender, EventArgs e)
        {
            
        }

        private void spreadsheetControl1_Click(object sender, EventArgs e)
        {

        }

        private void tableLayoutPanel1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void vGridControl2_Click(object sender, EventArgs e)
        {

        }

        private void textEdit1_EditValueChanged_1(object sender, EventArgs e)
        {

        }


        private void textBus_EditValueChanged(object sender, EventArgs e)
        {
            int mBusNum = BaseFunction.GetCode(textBus.Text);//获取主变台数          
            //主变表修改
            //BaseFunction.GridViewChanged(gvTrans, mTransNum, mSubSta); 
            //listNavigate.DataSource = dtGrid;
            //List<StructTable> mStructTableCollect = AnalysisDataStruct.AnalysisData(path, "SubStationBus");
            //FillVGrid vGrid = new FillVGrid();
            //vGrid.InitalGridData(mStructTableCollect, vGridControl1);
            //注：初始化默认主变为3台
          
            string DBFileName = string.Empty;
            DBFileName = DevExpress.Utils.FilesHelper.FindingFileName(Application.StartupPath, "\\湖北省2012年地理接线图.mdb");
            if (DBFileName != string.Empty)
            {
                string  TableGV_SUBSTATION_BUSBAR = "[GV_SUBSTATION_BUSBAR]";
                DataSet ds = new DataSet();
                System.Data.OleDb.OleDbDataAdapter oleDbDataAdapter = new System.Data.OleDb.OleDbDataAdapter("SELECT TOP " + mBusNum.ToString() + " * FROM " + TableGV_SUBSTATION_BUSBAR, "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DBFileName);
                DataBaseOp.SetWaitDialogCaption("Loading Order Details...");
                oleDbDataAdapter.Fill(ds, TableGV_SUBSTATION_BUSBAR);
                //oleDbDataAdapter = new System.Data.OleDb.OleDbDataAdapter("SELECT TOP 2 * FROM " + TableLookUp, "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DBFileName);
                //DataBaseOp.SetWaitDialogCaption("Loading Products...");
                //oleDbDataAdapter.Fill(ds, TableLookUp);
                //ds.Tables.AddRange();
                InitalGridControlByMdb(vGridControl1, ds, TableGV_SUBSTATION_BUSBAR);
                vGridControl1.DataSource = ds.Tables[TableGV_SUBSTATION_BUSBAR];
                vGridControl1.BestFit();
            }
            
            }

        private void Trans_KeyPress(object sender, KeyPressEventArgs e)
        {
            BaseFunction.KeyPress(sender, e);
        }
        private void Trans_EditValueChanged(object sender, EventArgs e)
        {
             
            //注：初始化默认主变为3台
            int mTransNum = BaseFunction.GetCode(Trans.Text);//获取主变台数          
            //主变表修改
            //BaseFunction.GridViewChanged(gvTrans, mTransNum, mSubSta); 
            //listNavigate.DataSource = dtGrid;
            //List<StructTable> mStructTableCollect = AnalysisDataStruct.AnalysisData(path, "SubStationTrans");
            //FillVGrid vGrid = new FillVGrid();
            //vGrid.InitalGridData( vGridDdtial);           
            if (DBFileName != string.Empty)
            {
                string TableGV_AC_SUBSTATION_PT = "[GV_AC_SUBSTATION_PT]";
                DataSet ds = new DataSet();
                System.Data.OleDb.OleDbDataAdapter oleDbDataAdapter = new System.Data.OleDb.OleDbDataAdapter("SELECT TOP " + mTransNum.ToString() + " * FROM " + TableGV_AC_SUBSTATION_PT, "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DBFileName);
                DataBaseOp.SetWaitDialogCaption("Loading Order Details...");
                oleDbDataAdapter.Fill(ds, TableGV_AC_SUBSTATION_PT);
                //oleDbDataAdapter = new System.Data.OleDb.OleDbDataAdapter("SELECT TOP 2 * FROM " + TableLookUp, "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DBFileName);
                //DataBaseOp.SetWaitDialogCaption("Loading Products...");
                //oleDbDataAdapter.Fill(ds, TableLookUp);
                //ds.Tables.AddRange();
                //EquipmentInfoShow SubStation = new EquipmentInfoShow();
                InitalGridControlByMdb(vGridDdtial, ds, TableGV_AC_SUBSTATION_PT);
                vGridDdtial.DataSource = ds.Tables[TableGV_AC_SUBSTATION_PT];
                vGridDdtial.BestFit();
            }                      
        }        

        private void tabPage1_Click_1(object sender, EventArgs e)
        {
            //注：初始化默认主变为3台
            //int mTransNum = BaseFunction.GetCode(txtTransCode.Text);//获取主变台数          
            //主变表修改
            //BaseFunction.GridViewChanged(gvTrans, mTransNum, mSubSta); 
            //listNavigate.DataSource = dtGrid;
            //List<StructTable> mStructTableCollect = AnalysisDataStruct.AnalysisData(path, "SubStationTrans");
            //FillVGrid vGrid = new FillVGrid();
            //vGrid.InitalGridData(mStructTableCollect, vGridControl2);
            //string DBFileName = string.Empty;
            //DBFileName = DevExpress.Utils.FilesHelper.FindingFileName(Application.StartupPath, "\\湖北省2012年地理接线图.mdb");
            //if (DBFileName != string.Empty)
            //{
            //    //InitMDBData("Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DBFileName);


            //    DataSet ds = new DataSet();
            //    System.Data.OleDb.OleDbDataAdapter oleDbDataAdapter = new System.Data.OleDb.OleDbDataAdapter("SELECT TOP 1 * FROM " + TableGrid, "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DBFileName);

            //    DataBaseOp.SetWaitDialogCaption("Loading Order Details...");
            //    oleDbDataAdapter.Fill(ds, TableGrid);
            //    oleDbDataAdapter = new System.Data.OleDb.OleDbDataAdapter("SELECT TOP 1 ZBH FROM " + TableLookUp, "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DBFileName);
            //    DataBaseOp.SetWaitDialogCaption("Loading Products...");
            //    oleDbDataAdapter.Fill(ds, TableLookUp);
            //    //ds.Tables.AddRange();
            //    //ds.Tables[TableGrid].
            //    vGridControl2.DataSource = ds.Tables[TableGrid];
            //    vGridControl2.BestFit();
            //    vGridControl4.DataSource = ds.Tables[TableGrid];
            //    //vGridControl4.Rows.Add
            //    repositoryItemLookUpEdit1.DataSource = ds.Tables[TableLookUp];
            //    repositoryItemLookUpEdit2.DataSource = ds.Tables[TableLookUp];
            //}
        }
        /// <summary>
        /// VGridControl 行宽自动调整
        /// </summary>
        private void RecalcWidth()
        {
            int recordWidth = (vGridControl1.Width - vGridControl1.RowHeaderWidth) / vGridControl1.Rows.Count;
            if (recordWidth > vGridControl1.RecordMinWidth)
            {
                vGridControl1.RecordWidth = recordWidth;
                vGridControl1.ScrollVisibility = DevExpress.XtraVerticalGrid.ScrollVisibility.Vertical;
            }
            else
            {
                vGridControl1.ScrollVisibility = DevExpress.XtraVerticalGrid.ScrollVisibility.Auto;
            }
        }
        

        private void textPcr_EditValueChanged(object sender, EventArgs e)
        {
            int mPcrNum = BaseFunction.GetCode(textPcr.Text);//获取主变台数          
            
            string DBFileName = string.Empty;
            DBFileName = DevExpress.Utils.FilesHelper.FindingFileName(Application.StartupPath, "\\湖北省2012年地理接线图.mdb");
            if (DBFileName != string.Empty)
            {
                string TableGV_SUBSTATION_PCR = "[GV_SUBSTATION_PCR]";
                DataSet ds = new DataSet();
                System.Data.OleDb.OleDbDataAdapter oleDbDataAdapter = new System.Data.OleDb.OleDbDataAdapter("SELECT TOP " + mPcrNum.ToString() + " * FROM " + TableGV_SUBSTATION_PCR, "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DBFileName);
                DataBaseOp.SetWaitDialogCaption("Loading Order Details...");
                oleDbDataAdapter.Fill(ds, TableGV_SUBSTATION_PCR);
                //oleDbDataAdapter = new System.Data.OleDb.OleDbDataAdapter("SELECT TOP 2 * FROM " + TableLookUp, "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DBFileName);
                //DataBaseOp.SetWaitDialogCaption("Loading Products...");
                //oleDbDataAdapter.Fill(ds, TableLookUp);
                //ds.Tables.AddRange();
                //InitalGridControl(vGridControl3,)
                InitalGridControlByMdb(vGridControl3, ds, TableGV_SUBSTATION_PCR);
                vGridControl3.DataSource = ds.Tables[TableGV_SUBSTATION_PCR];
                vGridControl3.BestFit();
            }
            
            
        }

        private void vGridControl2_Click_1(object sender, EventArgs e)
        {

        }

        private void gridControl1_Click(object sender, EventArgs e)
        {

        }

        private void baseButton_Click(object sender, EventArgs e)
        {
            SetTransView();
            BindTransData();
        }

        private void addNewRow_Click(object sender, EventArgs e)
        {
            EditorRow row = new EditorRow();
            row.Tag = NewRow;
            row.Properties.UnboundType = UnboundColumnType.Object;
            row.Properties.ShowUnboundExpressionMenu = true;
            this.vGridControl1.Rows[1].ChildRows.Add(row);
            this.vGridControl1.ShowUnboundExpressionEditor(row.Properties);
        }

        private void vGridControl4_Click(object sender, EventArgs e)
        {

        }
        void vGridControl1_RowChanged(object sender, RowChangedEventArgs e)
        {
            if (object.Equals(e.Row.Tag, NewRow)) //e.ChangeType == RowChangeTypeEnum.UnboundExpression &&
            {
                e.Row.Properties.Caption = e.Row.Properties.UnboundExpression;
            }
        }

        private void vGridControl4_Click_1(object sender, EventArgs e)
        {

        }

        private void gridControl2_Click(object sender, EventArgs e)
        {

        }

        private void vGridControl3_Click(object sender, EventArgs e)
        {

        }

        private void tabPage3_Click(object sender, EventArgs e)
        {

        }

       
    }              
}
